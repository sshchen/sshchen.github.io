<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Algorithm</title>
    <link>https://sshchen.github.io/</link>
    <description>Recent content in Introduction on Algorithm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://sshchen.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://sshchen.github.io/docs/01-binary-search/11.-find-first-and-last-position-of-element-in-sorted-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sshchen.github.io/docs/01-binary-search/11.-find-first-and-last-position-of-element-in-sorted-array/</guid>
      <description>class Solution { public int[] searchRange(int[] nums, int target) { if (nums == null || nums.length == 0) { return new int[]{-1, -1}; } int left = searchFirstLeft(nums, target); int right = searchLastRight(nums, target); return new int[]{left, right}; } private int searchFirstLeft(int[] nums, int target) { int i = 0, j = nums.length - 1, res = -1; while (i &amp;lt;= j) { int m = i + (j - i) / 2; if (nums[m] == target) { res = m; j = m - 1; } else if (nums[m] &amp;gt; target) { j = m - 1; } else { i = m + 1; } } return res; } private int searchLastRight(int[] nums, int target) { int i = 0, j = nums.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sshchen.github.io/docs/01-binary-search/13.-search-in-rotated-sorted-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sshchen.github.io/docs/01-binary-search/13.-search-in-rotated-sorted-array/</guid>
      <description>M1: binary search + strict ascending range
class Solution { public int search(int[] nums, int target) { int i = 0, j = nums.length - 1; if (target &amp;gt;= nums[0]) { while (i &amp;lt;= j) { int m = i + (j - i) / 2; if (nums[m] == target) { return m; } else if (nums[m] &amp;gt;= nums[0] &amp;amp;&amp;amp; nums[m] &amp;lt; target) { i = m + 1; } else { j = m - 1; } } } else { while (i &amp;lt;= j) { int m = i + (j - i) / 2; if (nums[m] == target) { return m; } else if (nums[m] &amp;lt; nums[0] &amp;amp;&amp;amp; nums[m] &amp;gt; target) { j = m - 1; } else { i = m + 1; } } } return -1; } } class Solution { public int search(int[] arr, int target) { int left = 0, right = arr.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sshchen.github.io/docs/01-binary-search/5.-binary-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sshchen.github.io/docs/01-binary-search/5.-binary-search/</guid>
      <description>class Solution { public int search(int[] nums, int target) { int i = 0, j = nums.length - 1; while (i &amp;lt;= j) { int m = i + (j - i) / 2; // (j + i) / 2 migth cause integer out of bound if (nums[m] == target) { return m; } if (nums[m] &amp;lt; target) { i = m + 1; } else { j = m - 1; } } return -1; } } Time: O(logn) Space: O(1) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sshchen.github.io/docs/01-binary-search/81.-search-in-rotated-sorted-array-ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sshchen.github.io/docs/01-binary-search/81.-search-in-rotated-sorted-array-ii/</guid>
      <description>class Solution { public boolean search(int[] nums, int target) { int left = 0, right = nums.length - 1; while (left &amp;lt;= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return true; } if (nums[mid] == nums[left]) { left++; continue; } if (nums[mid] &amp;gt; nums[left]) { if (nums[left] &amp;lt;= target &amp;amp;&amp;amp; target &amp;lt; nums[mid]) { right = mid - 1; } else { left = mid + 1; } } else { if (nums[mid] &amp;lt; target &amp;amp;&amp;amp; target &amp;lt;= nums[right]) { left = mid + 1; } else { right = mid - 1; } } } return false; } } Time: O(logn) Space: O(1) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sshchen.github.io/docs/02-two-pointers/4.-two-sum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sshchen.github.io/docs/02-two-pointers/4.-two-sum/</guid>
      <description>M1: Map to check visited element
class Solution { public int[] twoSum(int[] nums, int target) { Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; nums.length; i++) { if (map.containsKey(target - nums[i])) { return new int[]{map.get(target - nums[i]), i}; } map.put(nums[i], i); } return new int[]{-1, -1}; } } Time: O(n) Space: O(n) </description>
    </item>
    
  </channel>
</rss>
